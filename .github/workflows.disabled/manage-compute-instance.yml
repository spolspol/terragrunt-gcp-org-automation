name: Manage Compute Instance

on:
  workflow_dispatch:
    inputs:
      vm_instance:
        description: 'Compute instance to manage (project/instance format)'
        required: true
        type: choice
        options:
          # Example project VMs
          - web-project/web-server-01
          - org-dev-01/app-server-01
      action:
        description: 'Action to perform on the compute instance'
        required: true
        type: choice
        options:
          - deploy
          - destroy
        default: deploy
      confirm_destroy:
        description: 'Type "DESTROY" to confirm destructive action (required for destroy operations)'
        required: false
        type: string
        default: ''

concurrency:
  group: manage-compute-instance
  cancel-in-progress: false

jobs:
  get-env:
    name: üìã Get ENV
    uses: ./.github/workflows/common-env.yml

  validate-inputs:
    name: üîç Validate Inputs
    runs-on: ubuntu-latest
    outputs:
      instance-path: ${{ steps.validate.outputs.instance-path }}
      instance-display-name: ${{ steps.validate.outputs.instance-display-name }}
      project-name: ${{ steps.validate.outputs.project-name }}
      action-confirmed: ${{ steps.validate.outputs.action-confirmed }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate inputs and find instance path
        id: validate
        run: |
          VM_INSTANCE="${{ inputs.vm_instance }}"
          ACTION="${{ inputs.action }}"
          CONFIRM_DESTROY="${{ inputs.confirm_destroy }}"

          echo "üîç Validating inputs..."
          echo "VM instance: $VM_INSTANCE"
          echo "Action: $ACTION"

          # Parse project and instance name from project/instance format
          if ! echo "$VM_INSTANCE" | grep -q "/"; then
            echo "‚ùå Invalid VM instance format. Expected 'project/instance-name' format."
            echo "Valid formats: web-project/web-server-01, org-dev-01/app-server-01"
            exit 1
          fi

          PROJECT=$(echo "$VM_INSTANCE" | cut -d'/' -f1)
          INSTANCE_NAME=$(echo "$VM_INSTANCE" | cut -d'/' -f2)

          echo "Parsed project: $PROJECT"
          echo "Parsed instance: $INSTANCE_NAME"

          # Validate project and instance format
          if ! echo "$PROJECT" | grep -E "^[a-z0-9-]+$" > /dev/null; then
            echo "‚ùå Invalid project name format. Use lowercase letters, numbers, and hyphens only."
            exit 1
          fi

          if ! echo "$INSTANCE_NAME" | grep -E "^[a-z0-9-]+$" > /dev/null; then
            echo "‚ùå Invalid instance name format. Use lowercase letters, numbers, and hyphens only."
            exit 1
          fi

          # Validate project and instance combination
          case "$PROJECT" in
            "web-project")
              case "$INSTANCE_NAME" in
                "web-server-01")
                  echo "‚úÖ Valid instance '$INSTANCE_NAME' for project '$PROJECT'"
                  ;;
                *)
                  echo "‚ùå Instance '$INSTANCE_NAME' does not exist in project '$PROJECT'"
                  echo "Valid instances for $PROJECT: web-server-01"
                  exit 1
                  ;;
              esac
              ;;
            "org-dev-01")
              case "$INSTANCE_NAME" in
                "app-server-01"|"sql-server-01")
                  echo "‚úÖ Valid instance '$INSTANCE_NAME' for project '$PROJECT'"
                  ;;
                *)
                  echo "‚ùå Instance '$INSTANCE_NAME' does not exist in project '$PROJECT'"
                  echo "Valid instances for $PROJECT: app-server-01, sql-server-01"
                  exit 1
                  ;;
              esac
              ;;
            *)
              echo "‚ùå Unknown project: $PROJECT"
              echo "Available projects: web-project, org-dev-01"
              exit 1
              ;;
          esac

          echo "‚úÖ Project and instance combination validated"

          # Find the instance path
          echo "üîç Searching for compute instance: $INSTANCE_NAME in project: $PROJECT"

          # Search for the instance path in the live directory structure
          INSTANCE_PATH=""

          # Look for paths matching the pattern: live/**/compute/<instance_name>/vm/
          for path in $(find live -type d -path "*/compute/$INSTANCE_NAME/vm" 2>/dev/null || true); do
            if [ -f "$path/terragrunt.hcl" ]; then
              # Verify the path contains the correct project
              if echo "$path" | grep -q "/$PROJECT/"; then
                INSTANCE_PATH="$path"
                echo "‚úÖ Found instance at: $INSTANCE_PATH"
                break
              fi
            fi
          done

          if [ -z "$INSTANCE_PATH" ]; then
            echo "‚ùå Compute instance '$INSTANCE_NAME' not found in project '$PROJECT'"
            echo "Available instances by project:"
            echo "  web-project: web-server-01"
            echo "  org-dev-01: app-server-01, sql-server-01"
            exit 1
          fi

          # Validate destroy confirmation if needed
          ACTION_CONFIRMED="false"
          if [ "$ACTION" == "destroy" ]; then
            if [ "$CONFIRM_DESTROY" != "DESTROY" ]; then
              echo "‚ùå Destroy action requires confirmation. Please enter 'DESTROY' in the confirm_destroy field."
              exit 1
            fi
            ACTION_CONFIRMED="true"
            echo "‚ö†Ô∏è DESTROY action confirmed for VM: $INSTANCE_NAME in project: $PROJECT"
          else
            ACTION_CONFIRMED="true"
            echo "‚úÖ DEPLOY action confirmed for VM: $INSTANCE_NAME in project: $PROJECT"
          fi

          # Set outputs
          echo "instance-path=$INSTANCE_PATH" >> $GITHUB_OUTPUT
          echo "instance-display-name=$INSTANCE_NAME" >> $GITHUB_OUTPUT
          echo "project-name=$PROJECT" >> $GITHUB_OUTPUT
          echo "action-confirmed=$ACTION_CONFIRMED" >> $GITHUB_OUTPUT

          echo "‚úÖ Input validation completed successfully"

  execute-action:
    name: "${{ inputs.action == 'destroy' && 'üóëÔ∏è' || 'üöÄ' }} ${{ inputs.action == 'destroy' && 'Destroy' || 'Deploy' }}: ${{ needs.validate-inputs.outputs.instance-display-name }} (${{ needs.validate-inputs.outputs.project-name }})"
    runs-on: ubuntu-latest
    needs: [get-env, validate-inputs]
    env:
      TERRAGRUNT_VERSION: ${{ needs.get-env.outputs.terragrunt_version }}
      TOFU_VERSION: ${{ needs.get-env.outputs.tofu_version }}
      GCP_PROJECT_ID: ${{ needs.get-env.outputs.gcp_project_id }}
      GCP_REGION: ${{ needs.get-env.outputs.gcp_region }}
      TG_EXPERIMENT_MODE: ${{ needs.get-env.outputs.tg_experiment_mode }}
      TG_NON_INTERACTIVE: ${{ needs.get-env.outputs.tg_non_interactive }}
      TG_BACKEND_BOOTSTRAP: ${{ needs.get-env.outputs.tg_backend_bootstrap }}
    if: needs.validate-inputs.outputs.action-confirmed == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache Terragrunt and OpenTofu binaries
        id: cache-binaries
        uses: actions/cache@v4
        with:
          path: |
            ~/.local/bin/terragrunt
            ~/.local/bin/tofu
          key: terragrunt-${{ env.TERRAGRUNT_VERSION }}-tofu-${{ env.TOFU_VERSION }}-${{ runner.os }}
          restore-keys: |
            terragrunt-${{ env.TERRAGRUNT_VERSION }}-tofu-${{ env.TOFU_VERSION }}-
            terragrunt-${{ env.TERRAGRUNT_VERSION }}-

      - name: Setup Terragrunt and OpenTofu
        if: steps.cache-binaries.outputs.cache-hit != 'true'
        run: |
          # Create local bin directory
          mkdir -p ~/.local/bin

          # Install Terragrunt
          echo "üì• Downloading Terragrunt v${{ env.TERRAGRUNT_VERSION }}..."
          wget -O ~/.local/bin/terragrunt https://github.com/gruntwork-io/terragrunt/releases/download/v${{ env.TERRAGRUNT_VERSION }}/terragrunt_linux_amd64
          chmod +x ~/.local/bin/terragrunt

          # Install OpenTofu
          echo "üì• Downloading OpenTofu v${{ env.TOFU_VERSION }}..."
          wget -O tofu.tar.gz https://github.com/opentofu/opentofu/releases/download/v${{ env.TOFU_VERSION }}/tofu_${{ env.TOFU_VERSION }}_linux_amd64.tar.gz
          tar -xzf tofu.tar.gz
          chmod +x tofu
          mv tofu ~/.local/bin/
          rm tofu.tar.gz

          echo "‚úÖ Binaries downloaded and cached"

      - name: Add binaries to PATH and verify
        run: |
          # Add to PATH for this job
          echo "$HOME/.local/bin" >> $GITHUB_PATH
          export PATH="$HOME/.local/bin:$PATH"

          # Verify installations
          echo "üîç Verifying installations..."
          terragrunt --version
          tofu --version
          echo "‚úÖ All binaries verified"

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.TF_GOOGLE_CREDENTIALS }}

      - name: Pre-execution validation
        working-directory: ${{ needs.validate-inputs.outputs.instance-path }}
        run: |
          echo "üîç Pre-execution validation for: ${{ needs.validate-inputs.outputs.instance-display-name }} in project: ${{ needs.validate-inputs.outputs.project-name }}"
          echo "Working directory: ${{ needs.validate-inputs.outputs.instance-path }}"
          echo "Action: ${{ inputs.action }}"

          # Verify terragrunt.hcl exists
          if [ ! -f "terragrunt.hcl" ]; then
            echo "‚ùå terragrunt.hcl not found in current directory"
            exit 1
          fi

          # Show configuration summary
          echo "üìã Configuration file found:"
          ls -la terragrunt.hcl

          # Validate HCL syntax
          echo "üîç Validating HCL configuration..."
          terragrunt hcl validate

          echo "‚úÖ Pre-execution validation completed"

      - name: Initialize Terragrunt
        working-directory: ${{ needs.validate-inputs.outputs.instance-path }}
        run: |
          echo "üîß Initializing Terragrunt for: ${{ needs.validate-inputs.outputs.instance-display-name }} in project: ${{ needs.validate-inputs.outputs.project-name }}"
          terragrunt run init
          echo "‚úÖ Terragrunt initialization completed"

      - name: "${{ inputs.action == 'destroy' && 'Plan Destroy' || 'Plan Deploy' }}"
        id: plan
        working-directory: ${{ needs.validate-inputs.outputs.instance-path }}
        run: |
          echo "üìã Planning ${{ inputs.action }} for: ${{ needs.validate-inputs.outputs.instance-display-name }} in project: ${{ needs.validate-inputs.outputs.project-name }}"

          # Prepare plan file name
          export PLAN_TIMESTAMP=$(date -u +%Y%m%dT%H%M%SZ)
          export PLAN_FILE_NAME="${PLAN_TIMESTAMP}-${{ inputs.action }}-${{ needs.validate-inputs.outputs.project-name }}-${{ needs.validate-inputs.outputs.instance-display-name }}.plan"

          echo "Plan file name: $PLAN_FILE_NAME"

          set +e
          if [ "${{ inputs.action }}" == "destroy" ]; then
            echo "üóëÔ∏è Planning destroy operation..."
            terragrunt run plan -- -destroy -detailed-exitcode -compact-warnings -no-color | tee "$PLAN_FILE_NAME"
          else
            echo "üöÄ Planning deploy operation..."
            terragrunt run plan -- -detailed-exitcode -compact-warnings -no-color | tee "$PLAN_FILE_NAME"
          fi

          PLAN_EXIT_CODE=${PIPESTATUS[0]}
          TEE_EXIT_CODE=${PIPESTATUS[1]}
          set -e

          echo "Terragrunt plan exit code: $PLAN_EXIT_CODE"
          echo "Tee exit code: $TEE_EXIT_CODE"
          echo "Plan output file size: $(wc -l < "$PLAN_FILE_NAME" 2>/dev/null || echo 0) lines"

          # Show plan summary
          echo "üìã Plan Summary (first 20 lines):"
          head -20 "$PLAN_FILE_NAME" || echo "Could not read plan output"
          echo "üìã Plan Summary (last 20 lines):"
          tail -20 "$PLAN_FILE_NAME" || echo "Could not read plan output"

          if [ $PLAN_EXIT_CODE -eq 0 ]; then
            echo "result=no-changes" >> $GITHUB_OUTPUT
            echo "‚úÖ No changes detected"
          elif [ $PLAN_EXIT_CODE -eq 2 ]; then
            echo "result=changes-detected" >> $GITHUB_OUTPUT
            echo "‚úÖ Changes detected - ready for execution"
          else
            echo "result=error" >> $GITHUB_OUTPUT
            echo "‚ùå Terragrunt plan failed with exit code: $PLAN_EXIT_CODE"
            exit 1
          fi

      - name: "${{ inputs.action == 'destroy' && 'Execute Destroy' || 'Execute Deploy' }}"
        id: execute
        working-directory: ${{ needs.validate-inputs.outputs.instance-path }}
        if: steps.plan.outputs.result == 'changes-detected'
        run: |
          echo "${{ inputs.action == 'destroy' && 'üóëÔ∏è Executing DESTROY' || 'üöÄ Executing DEPLOY' }} for: ${{ needs.validate-inputs.outputs.instance-display-name }} in project: ${{ needs.validate-inputs.outputs.project-name }}"

          set +e
          if [ "${{ inputs.action }}" == "destroy" ]; then
            echo "‚ö†Ô∏è WARNING: About to destroy compute instance: ${{ needs.validate-inputs.outputs.instance-display-name }} in project: ${{ needs.validate-inputs.outputs.project-name }}"
            echo "‚ö†Ô∏è This action is IRREVERSIBLE and will permanently delete the instance"
            terragrunt run destroy -- -auto-approve
          else
            echo "üöÄ Deploying configuration for compute instance: ${{ needs.validate-inputs.outputs.instance-display-name }} in project: ${{ needs.validate-inputs.outputs.project-name }}"
            terragrunt run apply -- -auto-approve
          fi

          ACTION_EXIT_CODE=$?
          set -e

          if [ $ACTION_EXIT_CODE -eq 0 ]; then
            echo "‚úÖ ${{ inputs.action == 'destroy' && 'Destroy' || 'Deploy' }} completed successfully for: ${{ needs.validate-inputs.outputs.instance-display-name }} in project: ${{ needs.validate-inputs.outputs.project-name }}"
            echo "result=success" >> $GITHUB_OUTPUT
          else
            echo "‚ùå ${{ inputs.action == 'destroy' && 'Destroy' || 'Deploy' }} failed with exit code: $ACTION_EXIT_CODE for: ${{ needs.validate-inputs.outputs.instance-display-name }} in project: ${{ needs.validate-inputs.outputs.project-name }}"
            echo "result=error" >> $GITHUB_OUTPUT
            exit 1
          fi

      - name: Show No Changes Message
        if: steps.plan.outputs.result == 'no-changes'
        run: |
          echo "‚ÑπÔ∏è No changes detected for compute instance: ${{ needs.validate-inputs.outputs.instance-display-name }} in project: ${{ needs.validate-inputs.outputs.project-name }}"
          echo "The current state matches the desired configuration."
          if [ "${{ inputs.action }}" == "destroy" ]; then
            echo "The instance may already be destroyed or not exist."
          else
            echo "The instance is already up-to-date."
          fi

  summary:
    name: üìä Execution Summary
    runs-on: ubuntu-latest
    needs: [validate-inputs, execute-action]
    if: always()
    steps:
      - name: Generate execution summary
        run: |
          VALIDATION_STATUS="${{ needs.validate-inputs.result }}"
          EXECUTION_STATUS="${{ needs.execute-action.result }}"
          PROJECT_NAME="${{ needs.validate-inputs.outputs.project-name }}"
          VM_NAME="${{ needs.validate-inputs.outputs.instance-display-name }}"
          ACTION="${{ inputs.action }}"

          echo "## üéØ Compute Instance Management Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Determine overall status
          if [ "$VALIDATION_STATUS" == "success" ] && [ "$EXECUTION_STATUS" == "success" ]; then
            echo "üü¢ **Status: SUCCESS** ‚úÖ" >> $GITHUB_STEP_SUMMARY
            OVERALL_STATUS="success"
          elif [ "$VALIDATION_STATUS" == "failure" ]; then
            echo "üî¥ **Status: VALIDATION FAILED** ‚ùå" >> $GITHUB_STEP_SUMMARY
            OVERALL_STATUS="validation_failed"
          elif [ "$EXECUTION_STATUS" == "failure" ]; then
            echo "üî¥ **Status: EXECUTION FAILED** ‚ùå" >> $GITHUB_STEP_SUMMARY
            OVERALL_STATUS="execution_failed"
          elif [ "$EXECUTION_STATUS" == "skipped" ]; then
            echo "üü° **Status: NO CHANGES** ‚ÑπÔ∏è" >> $GITHUB_STEP_SUMMARY
            OVERALL_STATUS="no_changes"
          else
            echo "üü° **Status: UNKNOWN** ‚ùì" >> $GITHUB_STEP_SUMMARY
            OVERALL_STATUS="unknown"
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Project:** $PROJECT_NAME" >> $GITHUB_STEP_SUMMARY
          echo "**Instance:** $VM_NAME" >> $GITHUB_STEP_SUMMARY
          echo "**Action:** ${ACTION^^}" >> $GITHUB_STEP_SUMMARY
          echo "**Path:** \`${{ needs.validate-inputs.outputs.instance-path }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Workflow:** [View Details](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Show step results
          echo "### üìã Step Results:" >> $GITHUB_STEP_SUMMARY
          echo "| Step | Status | Result |" >> $GITHUB_STEP_SUMMARY
          echo "|------|--------|--------|" >> $GITHUB_STEP_SUMMARY

          # Validation step
          if [ "$VALIDATION_STATUS" == "success" ]; then
            echo "| üîç Input Validation | ‚úÖ PASSED | Instance found and validated |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| üîç Input Validation | ‚ùå FAILED | Invalid inputs or instance not found |" >> $GITHUB_STEP_SUMMARY
          fi

          # Execution step
          if [ "$EXECUTION_STATUS" == "success" ]; then
            echo "| ${{ inputs.action == 'destroy' && 'üóëÔ∏è' || 'üöÄ' }} ${{ inputs.action == 'destroy' && 'Destroy' || 'Deploy' }} Execution | ‚úÖ COMPLETED | Infrastructure ${{ inputs.action }}ed successfully |" >> $GITHUB_STEP_SUMMARY
          elif [ "$EXECUTION_STATUS" == "failure" ]; then
            echo "| ${{ inputs.action == 'destroy' && 'üóëÔ∏è' || 'üöÄ' }} ${{ inputs.action == 'destroy' && 'Destroy' || 'Deploy' }} Execution | ‚ùå FAILED | Execution encountered errors |" >> $GITHUB_STEP_SUMMARY
          elif [ "$EXECUTION_STATUS" == "skipped" ]; then
            echo "| ${{ inputs.action == 'destroy' && 'üóëÔ∏è' || 'üöÄ' }} ${{ inputs.action == 'destroy' && 'Destroy' || 'Deploy' }} Execution | ‚è∏Ô∏è SKIPPED | No changes detected |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| ${{ inputs.action == 'destroy' && 'üóëÔ∏è' || 'üöÄ' }} ${{ inputs.action == 'destroy' && 'Destroy' || 'Deploy' }} Execution | ‚ùì UNKNOWN | Unexpected status |" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY

          # Show appropriate next steps based on status
          case "$OVERALL_STATUS" in
            "success")
              echo "### ‚úÖ Success - Next Steps:" >> $GITHUB_STEP_SUMMARY
              if [ "$ACTION" == "destroy" ]; then
                echo "- **üóëÔ∏è Instance destroyed** - The compute instance has been permanently removed" >> $GITHUB_STEP_SUMMARY
                echo "- **üîç Verify in GCP Console** - Confirm the instance no longer appears in Compute Engine" >> $GITHUB_STEP_SUMMARY
                echo "- **üí∞ Cost savings** - Billing for this instance has stopped" >> $GITHUB_STEP_SUMMARY
              else
                echo "- **üöÄ Instance deployed** - The compute instance is now running" >> $GITHUB_STEP_SUMMARY
                echo "- **üîç Verify in GCP Console** - Check the instance status in Compute Engine" >> $GITHUB_STEP_SUMMARY
                echo "- **üåê Connect to instance** - Use SSH or RDP to access the instance if needed" >> $GITHUB_STEP_SUMMARY
              fi
              ;;
            "validation_failed")
              echo "### ‚ùå Validation Failed - Next Steps:" >> $GITHUB_STEP_SUMMARY
              echo "- **üîç Check instance name** - Ensure the instance name exists in the repository" >> $GITHUB_STEP_SUMMARY
              echo "- **üìã Available instances** - Review the validation logs for available instance names" >> $GITHUB_STEP_SUMMARY
              echo "- **üîß Fix input errors** - Correct any input validation issues and re-run" >> $GITHUB_STEP_SUMMARY
              ;;
            "execution_failed")
              echo "### ‚ùå Execution Failed - Next Steps:" >> $GITHUB_STEP_SUMMARY
              echo "- **üìã Review logs** - Check the execution step logs for detailed error information" >> $GITHUB_STEP_SUMMARY
              echo "- **üîß Fix configuration** - Address any Terragrunt or infrastructure issues" >> $GITHUB_STEP_SUMMARY
              echo "- **üîÑ Retry operation** - Re-run the workflow after fixing issues" >> $GITHUB_STEP_SUMMARY
              ;;
            "no_changes")
              echo "### ‚ÑπÔ∏è No Changes - Next Steps:" >> $GITHUB_STEP_SUMMARY
              echo "- **‚úÖ Instance up-to-date** - No changes were needed" >> $GITHUB_STEP_SUMMARY
              echo "- **üîç Verify state** - The current state matches the desired configuration" >> $GITHUB_STEP_SUMMARY
              if [ "$ACTION" == "destroy" ]; then
                echo "- **‚ùì Already destroyed** - The instance may already be destroyed" >> $GITHUB_STEP_SUMMARY
              fi
              ;;
          esac

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**‚ö†Ô∏è Important Security Notes:**" >> $GITHUB_STEP_SUMMARY
          echo "- This workflow requires manual approval and confirmation for destructive actions" >> $GITHUB_STEP_SUMMARY
          echo "- Destroy operations require typing 'DESTROY' to confirm the action" >> $GITHUB_STEP_SUMMARY
          echo "- All actions are logged and auditable through GitHub Actions" >> $GITHUB_STEP_SUMMARY
          echo "- Only authorized users with repository access can trigger this workflow" >> $GITHUB_STEP_SUMMARY
