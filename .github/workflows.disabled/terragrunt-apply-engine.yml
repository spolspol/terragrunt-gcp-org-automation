name: Deployment Engine

on:
  push:
    paths:
      - 'live/**/folder/**'
      - 'live/**/project/**'
      - 'live/**/*-vpc-network/**'
      - 'live/**/vpc-network/**'
      - 'live/**/external-ips/**'
      - 'live/**/firewall-rules/**'
      - 'live/**/firewall.hcl'
      - 'live/**/compute/**'
      - 'live/**/*-psa/**'
      - 'live/**/secrets/**'
      - 'live/**/buckets/**'
      - 'live/**/bigquery/**'
      - 'live/**/cloud-sql/**'
      - 'live/**/gke/**'
      - 'live/**/iam-bindings/**'
      - 'live/**/compute/*/iam-bindings/**'
      - 'live/**/gke/*/iam-bindings/**'
      - '_common/templates/folder.hcl'
      - '_common/templates/folder/**'
      - '_common/templates/project.hcl'
      - '_common/templates/project/**'
      - '_common/templates/network.hcl'
      - '_common/templates/network/**'
      - '_common/templates/external_ip.hcl'
      - '_common/templates/external_ip/**'
      - '_common/templates/firewall_rules.hcl'
      - '_common/templates/firewall_rules/**'
      - '_common/templates/compute_instance.hcl'
      - '_common/templates/compute_instance/**'
      - '_common/templates/instance_template.hcl'
      - '_common/templates/instance_template/**'
      - '_common/templates/private_service_access.hcl'
      - '_common/templates/private_service_access/**'
      - '_common/templates/secret_manager.hcl'
      - '_common/templates/secret_manager/**'
      - '_common/templates/cloud_storage.hcl'
      - '_common/templates/cloud_storage/**'
      - '_common/templates/bigquery.hcl'
      - '_common/templates/bigquery/**'
      - '_common/templates/cloud_sql.hcl'
      - '_common/templates/cloud_sql/**'
      - '_common/templates/gke.hcl'
      - '_common/templates/gke/**'
      - '_common/templates/iam_bindings.hcl'
      - '_common/templates/iam_bindings/**'
    branches:
      - main
      - develop

jobs:
  get-env:
    name: üìù Setup ENV
    uses: ./.github/workflows/common-env.yml

  detect-resource-changes:
    name: üîç Discover Changes
    runs-on: ubuntu-latest
    outputs:
      has-folder-changes: ${{ steps.detect.outputs.has-folder-changes }}
      has-project-changes: ${{ steps.detect.outputs.has-project-changes }}
      has-vpc-network-changes: ${{ steps.detect.outputs.has-vpc-network-changes }}
      has-external-ip-changes: ${{ steps.detect.outputs.has-external-ip-changes }}
      has-firewall-rules-changes: ${{ steps.detect.outputs.has-firewall-rules-changes }}
      has-buckets-changes: ${{ steps.detect.outputs.has-buckets-changes }}
      has-instance-template-changes: ${{ steps.detect.outputs.has-instance-template-changes }}
      has-compute-changes: ${{ steps.detect.outputs.has-compute-changes }}
      has-private-service-access-changes: ${{ steps.detect.outputs.has-private-service-access-changes }}
      has-secrets-changes: ${{ steps.detect.outputs.has-secrets-changes }}
      has-bigquery-changes: ${{ steps.detect.outputs.has-bigquery-changes }}
      has-cloud-sql-changes: ${{ steps.detect.outputs.has-cloud-sql-changes }}
      has-gke-changes: ${{ steps.detect.outputs.has-gke-changes }}
      has-iam-bindings-changes: ${{ steps.detect.outputs.has-iam-bindings-changes }}
      has-project-iam-bindings-changes: ${{ steps.detect.outputs.has-project-iam-bindings-changes }}
      has-instance-iam-bindings-changes: ${{ steps.detect.outputs.has-instance-iam-bindings-changes }}
      has-gke-iam-bindings-changes: ${{ steps.detect.outputs.has-gke-iam-bindings-changes }}
      execution-order: ${{ steps.detect.outputs.execution-order }}
      deleted-resources: ${{ steps.detect.outputs.deleted-resources }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Detect changes for each resource type
        id: detect
        run: |
          # For push events, compare with the previous commit on the same branch
          # Use set +e to prevent script failure on git command errors
          set +e

          # Default to using HEAD~1 for change detection
          USE_HEAD_PREV=true

          # Check if github.event.before is valid and exists
          if [ -n "${{ github.event.before }}" ] && [ "${{ github.event.before }}" != "0000000000000000000000000000000000000000" ]; then
            # Test if the before commit exists (suppress all output)
            if git cat-file -e "${{ github.event.before }}" 2>/dev/null; then
              echo "‚úÖ Using github.event.before commit for change detection"
              CHANGED_FILES=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} 2>/dev/null || echo "")
              CHANGED_FILES_STATUS=$(git diff --name-status ${{ github.event.before }} ${{ github.sha }} 2>/dev/null || echo "")
              if [ -n "$CHANGED_FILES" ]; then
                USE_HEAD_PREV=false
              fi
            else
              echo "‚ö†Ô∏è github.event.before commit (${{ github.event.before }}) not found in repository"
            fi
          fi

          # Fallback to HEAD~1 if github.event.before is not usable
          if [ "$USE_HEAD_PREV" = true ]; then
            if git cat-file -e HEAD~1 2>/dev/null; then
              echo "‚úÖ Using HEAD~1 for change detection"
              CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD 2>/dev/null || echo "")
              CHANGED_FILES_STATUS=$(git diff --name-status HEAD~1 HEAD 2>/dev/null || echo "")
            else
              echo "‚ö†Ô∏è HEAD~1 not available, treating all files as new (first commit scenario)"
              CHANGED_FILES=$(git ls-files 2>/dev/null || echo "")
              CHANGED_FILES_STATUS=$(git ls-files 2>/dev/null | sed 's/^/A\t/' || echo "")
            fi
          fi

          # Re-enable error exit
          set -e
          echo "Changed files:"
          echo "$CHANGED_FILES"
          echo "File status changes:"
          echo "$CHANGED_FILES_STATUS"

          # Get all deleted files for later deletion checking
          echo "üîç Getting list of all deleted files..."
          DELETED_FILES=$(echo "$CHANGED_FILES_STATUS" | grep "^D" | cut -f2 || true)
          echo "All deleted files:"
          echo "$DELETED_FILES"

          declare -A RESOURCE_PATTERNS=(
            ["folder"]="(live/.*/folder/|_common/templates/folder)"
            ["project"]="(live/.*/project/|_common/templates/project)"
            ["vpc-network"]="(live/.*/.*vpc-network/|live/.*/vpc-network/|_common/templates/network)"
            ["external-ip"]="(live/.*/external-ips/|_common/templates/external_ip)"
            ["firewall-rules"]="(live/.*/firewall-rules/|live/.*/firewall\.hcl$|_common/templates/firewall_rules)"
            ["buckets"]="(live/.*/buckets/|_common/templates/cloud_storage)"
            ["instance-template"]="(live/.*/compute/[^/]+/terragrunt\.hcl$|_common/templates/instance_template)"
            ["compute"]="(live/.*/compute/[^/]+/vm/|_common/templates/compute_instance)"
            ["private-service-access"]="(live/.*/.*psa/|_common/templates/private_service_access)"
            ["secrets"]="(live/.*/secrets/|_common/templates/secret_manager)"
            ["bigquery"]="(live/.*/bigquery/[^/]+/|_common/templates/bigquery)"
            ["cloud-sql"]="(live/.*/cloud-sql/[^/]+/|_common/templates/cloud_sql)"
            ["gke"]="(live/.*/gke/|_common/templates/gke)"
            ["project-iam-bindings"]="(live/.*/iam-bindings/|_common/templates/iam_bindings)"
            ["instance-iam-bindings"]="(live/.*/compute/.*/iam-bindings/|_common/templates/iam_bindings)"
            ["gke-iam-bindings"]="(live/.*/gke/.*/iam-bindings/|_common/templates/iam_bindings)"
          )

          EXECUTION_ORDER="[]"
          ORDER_ITEMS=()
          DELETED_RESOURCES=()

          for resource_type in folder project vpc-network external-ip firewall-rules buckets instance-template compute private-service-access secrets bigquery cloud-sql gke project-iam-bindings instance-iam-bindings gke-iam-bindings; do
            pattern="${RESOURCE_PATTERNS[$resource_type]}"
            changes=$(echo "$CHANGED_FILES" | grep -E "$pattern" || true)
            echo "Checking for $resource_type changes with pattern: $pattern"
            echo "Matches found:"
            echo "$changes"

            if [ -n "$changes" ]; then
              # Extract individual resource directories
              RESOURCE_DIRS=""

              echo "Processing $resource_type with changes:"
              echo "$changes"
              echo "Debug: About to extract RESOURCE_DIRS for $resource_type"

              case "$resource_type" in
                "folder")
                  RESOURCE_DIRS=$(echo "$changes" | grep -E "live/.*/folder/" | sed -E 's|(live/.*/folder)/.*|\1|' | sort -u || true)
                  ;;
                "project")
                  RESOURCE_DIRS=$(echo "$changes" | grep -E "live/.*/project/" | sed -E 's|(live/.*/project)/.*|\1|' | sort -u || true)
                  ;;
                "vpc-network")
                  RESOURCE_DIRS=$(echo "$changes" | grep -E "live/.*/.*vpc-network/|live/.*/vpc-network/" | sed -E 's|(live/.*/[^/]*vpc-network)/.*|\1|' | sort -u || true)
                  ;;
                "external-ip")
                  RESOURCE_DIRS=$(echo "$changes" | grep -E "live/.*/external-ips/[^/]+/" | sed -E 's|(live/.*/external-ips/[^/]+)/.*|\1|' | sort -u || true)
                  ;;
                "firewall-rules")
                  # Match individual firewall rule directories
                  FIREWALL_RULES_DIRS=$(echo "$changes" | grep -E "live/.*/firewall-rules/[^/]+/" | sed -E 's|(live/.*/firewall-rules/[^/]+)/.*|\1|' | sort -u || true)

                  # When firewall.hcl changes, trigger ALL firewall rule directories in the same parent
                  FIREWALL_HCL_CHANGED=$(echo "$changes" | grep -E "live/.*/firewall-rules/firewall\.hcl$" || true)
                  if [ -n "$FIREWALL_HCL_CHANGED" ]; then
                    # Find all firewall rule directories in the same parent as the changed firewall.hcl
                    FIREWALL_HCL_PARENT=$(echo "$FIREWALL_HCL_CHANGED" | sed -E 's|(live/.*/firewall-rules)/firewall\.hcl|\1|')
                    ALL_FIREWALL_RULES_IN_PARENT=$(find $FIREWALL_HCL_PARENT -maxdepth 1 -type d | grep -E ".*/firewall-rules/[^/]+$" | sort || true)
                    FIREWALL_RULES_DIRS=$(echo -e "$FIREWALL_RULES_DIRS\n$ALL_FIREWALL_RULES_IN_PARENT" | grep -v "^$" | sort -u || true)
                  fi

                  # Handle standalone firewall.hcl files (not within firewall-rules directories)
                  STANDALONE_FIREWALL_HCL_FILES=$(echo "$changes" | grep -E "live/.*/firewall\.hcl$" | grep -v "firewall-rules" | sed -E 's|(live/.*)/firewall\.hcl|\1|' | sort -u || true)
                  RESOURCE_DIRS=$(echo -e "$FIREWALL_RULES_DIRS\n$STANDALONE_FIREWALL_HCL_FILES" | grep -v "^$" | sort -u || true)
                  ;;
                "buckets")
                  RESOURCE_DIRS=$(echo "$changes" | grep -E "live/.*/buckets/[^/]+/" | sed -E 's|(live/.*/buckets/[^/]+)/.*|\1|' | sort -u || true)
                  ;;
                "instance-template")
                  RESOURCE_DIRS=$(echo "$changes" | grep -E "live/.*/compute/[^/]+/terragrunt\.hcl$" | sed -E 's|(live/.*/compute/[^/]+)/.*|\1|' | sort -u || true)
                  ;;
                "compute")
                  RESOURCE_DIRS=$(echo "$changes" | grep -E "live/.*/compute/[^/]+/vm/" | sed -E 's|(live/.*/compute/[^/]+/vm)/.*|\1|' | sort -u || true)
                  ;;
                "private-service-access")
                  RESOURCE_DIRS=$(echo "$changes" | grep -E "live/.*/.*psa/" | sed -E 's|(live/.*/.*psa)/.*|\1|' | sort -u || true)
                  ;;
                "secrets")
                  RESOURCE_DIRS=$(echo "$changes" | grep -E "live/.*/secrets/[^/]+/" | sed -E 's|(live/.*/secrets/[^/]+)/.*|\1|' | sort -u || true)
                  ;;
                "bigquery")
                  RESOURCE_DIRS=$(echo "$changes" | grep -E "live/.*/bigquery/[^/]+/" | sed -E 's|(live/.*/bigquery/[^/]+)/.*|\1|' | sort -u || true)
                  ;;
                "cloud-sql")
                  RESOURCE_DIRS=$(echo "$changes" | grep -E "live/.*/cloud-sql/[^/]+/" | sed -E 's|(live/.*/cloud-sql/[^/]+)/.*|\1|' | sort -u || true)
                  ;;
                "gke")
                  RESOURCE_DIRS=$(echo "$changes" | grep -E "live/.*/gke/" | sed -E 's|(live/.*/gke/[^/]+)/.*|\1|' | sort -u || true)
                  ;;
                "gke-iam-bindings")
                  RESOURCE_DIRS=$(echo "$changes" | grep -E "live/.*/gke/[^/]+/iam-bindings/" | sed -E 's|(live/.*/gke/[^/]+/iam-bindings)/.*|\1|' | sort -u || true)
                  ;;
                "iam-bindings")
                  # Project-level IAM bindings
                  PROJECT_IAM_DIRS=$(echo "$changes" | grep -E "live/.*/iam-bindings/" | grep -v "/compute/" | sed -E 's|(live/.*/iam-bindings)/.*|\1|' | sort -u || true)
                  # Instance-level IAM bindings
                  INSTANCE_IAM_DIRS=$(echo "$changes" | grep -E "live/.*/compute/[^/]+/iam-bindings/" | sed -E 's|(live/.*/compute/[^/]+/iam-bindings)/.*|\1|' | sort -u || true)
                  RESOURCE_DIRS=$(echo -e "$PROJECT_IAM_DIRS\n$INSTANCE_IAM_DIRS" | grep -v "^$" | sort -u || true)

                  # Set separate flags for project and instance IAM bindings
                  if [ -n "$PROJECT_IAM_DIRS" ]; then
                    echo "has-project-iam-bindings-changes=true" >> $GITHUB_OUTPUT
                    echo "‚úÖ Project IAM bindings changes detected"
                  else
                    echo "has-project-iam-bindings-changes=false" >> $GITHUB_OUTPUT
                  fi

                  if [ -n "$INSTANCE_IAM_DIRS" ]; then
                    echo "has-instance-iam-bindings-changes=true" >> $GITHUB_OUTPUT
                    echo "‚úÖ Instance IAM bindings changes detected"
                  else
                    echo "has-instance-iam-bindings-changes=false" >> $GITHUB_OUTPUT
                  fi
                  ;;
                "project-iam-bindings")
                  # Project-level IAM bindings only
                  RESOURCE_DIRS=$(echo "$changes" | grep -E "live/.*/iam-bindings/" | grep -v "/compute/" | sed -E 's|(live/.*/iam-bindings)/.*|\1|' | sort -u || true)
                  ;;
                "instance-iam-bindings")
                  # Instance-level IAM bindings only
                  RESOURCE_DIRS=$(echo "$changes" | grep -E "live/.*/compute/[^/]+/iam-bindings/" | sed -E 's|(live/.*/compute/[^/]+/iam-bindings)/.*|\1|' | sort -u || true)
                  ;;
              esac

              echo "All $resource_type directories with changes: $RESOURCE_DIRS"

              # Check if any of these resource directories have been completely deleted or are example resources
              FILTERED_RESOURCE_DIRS=""
              for resource_dir in $RESOURCE_DIRS; do
                if [ -n "$resource_dir" ]; then
                  # Extract the final folder name from the resource directory path
                  FINAL_FOLDER_NAME=$(basename "$resource_dir")

                  # Check if this is an example resource (folder name starts with "example-")
                  if [[ "$FINAL_FOLDER_NAME" =~ ^example- ]]; then
                    echo "üö´ Excluding example resource: $resource_dir"
                    echo "     Reason: Folder name starts with 'example-' ($FINAL_FOLDER_NAME)"
                    continue
                  fi

                  # Check if all files in this directory are being deleted (no additions or modifications)
                  RESOURCE_DELETED_FILES=$(echo "$DELETED_FILES" | grep "^$resource_dir/" || true)
                  RESOURCE_NON_DELETED_FILES=$(echo "$CHANGED_FILES" | grep "^$resource_dir/" | grep -v "$(echo "$DELETED_FILES" | grep "^$resource_dir/" || true)" || true)

                  if [ -n "$RESOURCE_DELETED_FILES" ] && [ -z "$RESOURCE_NON_DELETED_FILES" ]; then
                    echo "üóëÔ∏è  Excluding completely deleted $resource_type: $resource_dir"
                    echo "     Deleted files: $(echo "$RESOURCE_DELETED_FILES" | wc -l) files"
                    DELETED_RESOURCES+=("$resource_dir")
                  else
                    echo "‚úÖ Including $resource_type in deployment: $resource_dir"
                    if [ -n "$RESOURCE_DELETED_FILES" ]; then
                      echo "     (has some deletions but also has additions/modifications)"
                    fi
                    FILTERED_RESOURCE_DIRS="$FILTERED_RESOURCE_DIRS $resource_dir"
                  fi
                fi
              done

              # For all resource types, check if we have any non-deleted resources
              if [ -n "$FILTERED_RESOURCE_DIRS" ]; then
                echo "has-${resource_type}-changes=true" >> $GITHUB_OUTPUT
                echo "‚úÖ $resource_type changes detected (after filtering deletions)"
                ORDER_ITEMS+=("$resource_type")
              else
                echo "has-${resource_type}-changes=false" >> $GITHUB_OUTPUT
                echo "‚ÑπÔ∏è No $resource_type changes detected"
              fi
            else
              echo "has-${resource_type}-changes=false" >> $GITHUB_OUTPUT
              echo "‚ÑπÔ∏è No $resource_type changes detected"
            fi
          done

          # Output deleted resources information
          if [ ${#DELETED_RESOURCES[@]} -gt 0 ]; then
            # Create JSON array for deleted resources
            TEMP_FILE=$(mktemp)
            printf '%s\n' "${DELETED_RESOURCES[@]}" > "$TEMP_FILE"
            DELETED_RESOURCES_JSON=$(cat "$TEMP_FILE" | grep -v "^$" | jq -R . | jq -s -c .)
            rm -f "$TEMP_FILE"

            echo "deleted-resources=$DELETED_RESOURCES_JSON" >> $GITHUB_OUTPUT
            echo "‚úÖ Deleted resources detected: $DELETED_RESOURCES_JSON"
          else
            echo "deleted-resources=[]" >> $GITHUB_OUTPUT
            echo "‚ÑπÔ∏è No deleted resources detected"
          fi

          # Report deleted resources
          if [ ${#DELETED_RESOURCES[@]} -gt 0 ]; then
            echo ""
            echo "üóëÔ∏è  Individual resources skipped due to deletion:"
            for resource in "${DELETED_RESOURCES[@]}"; do
              echo "  - $resource"
            done
            echo ""
            echo "‚ÑπÔ∏è  Individual deleted resources are skipped from deployment workflows because:"
            echo "   - No deployment is needed for resources being removed"
            echo "   - Terraform destroy operations should be handled separately"
            echo "   - Running deployment on deleted resources would fail"
            echo "   - Other resources of the same type are still processed normally"
          fi

          if [ ${#ORDER_ITEMS[@]} -gt 0 ]; then
            # Create JSON array with robust error handling
            echo "Creating execution order JSON array..."
            TEMP_FILE=$(mktemp)
            printf '%s\n' "${ORDER_ITEMS[@]}" > "$TEMP_FILE"

            if [ -s "$TEMP_FILE" ]; then
              EXECUTION_ORDER=$(cat "$TEMP_FILE" | grep -v "^$" | jq -R . | jq -s -c .)
            else
              EXECUTION_ORDER="[]"
            fi
            rm -f "$TEMP_FILE"

            # Validate JSON before outputting
            if echo "$EXECUTION_ORDER" | jq . >/dev/null 2>&1; then
              echo "‚úÖ Valid execution order JSON created: $EXECUTION_ORDER"
            else
              echo "‚ùå Invalid JSON detected, using empty array"
              EXECUTION_ORDER="[]"
            fi
          fi
          echo "execution-order=$EXECUTION_ORDER" >> $GITHUB_OUTPUT
          echo "Execution order: $EXECUTION_ORDER"

  apply-folders:
    name: üìÅ Apply Folders
    needs: [get-env, detect-resource-changes]
    if: needs.detect-resource-changes.outputs.has-folder-changes == 'true'
    uses: ./.github/workflows/terragrunt-reusable.yaml
    with:
      mode: "apply"
      resource_type: "folder"
      resource_paths: '["live/dev-account/**/folder/"]'
      template_path: "_common/templates/folder"
      resource_emoji: "üìÅ"
      excluded_resources: ${{ needs.detect-resource-changes.outputs.deleted-resources }}
    secrets:
      TF_GOOGLE_CREDENTIALS: ${{ secrets.TF_GOOGLE_CREDENTIALS }}

  apply-projects:
    name: üèóÔ∏è Apply Projects
    needs: [get-env, detect-resource-changes, apply-folders]
    if: |
      always() &&
      needs.detect-resource-changes.outputs.has-project-changes == 'true' &&
      (needs.apply-folders.result == 'success' || needs.apply-folders.result == 'skipped' || needs.apply-folders.result == null)
    uses: ./.github/workflows/terragrunt-reusable.yaml
    with:
      mode: "apply"
      resource_type: "project"
      resource_paths: '["live/dev-account/**/project/"]'
      template_path: "_common/templates/project"
      resource_emoji: "üì¶"
      excluded_resources: ${{ needs.detect-resource-changes.outputs.deleted-resources }}
    secrets:
      TF_GOOGLE_CREDENTIALS: ${{ secrets.TF_GOOGLE_CREDENTIALS }}

  apply-iam-bindings:
    name: üîê Apply Project IAM Bindings
    needs: [get-env, detect-resource-changes, apply-folders, apply-projects]
    if: |
      always() &&
      needs.detect-resource-changes.outputs.has-project-iam-bindings-changes == 'true' &&
      (needs.apply-folders.result == 'success' || needs.apply-folders.result == 'skipped' || needs.apply-folders.result == null) &&
      (needs.apply-projects.result == 'success' || needs.apply-projects.result == 'skipped' || needs.apply-projects.result == null)
    uses: ./.github/workflows/terragrunt-reusable.yaml
    with:
      mode: "apply"
      resource_type: "project-iam-bindings"
      resource_paths: '["live/*/*/*/*/iam-bindings/"]'
      template_path: "_common/templates/iam_bindings"
      resource_emoji: "üîê"
      excluded_resources: ${{ needs.detect-resource-changes.outputs.deleted-resources }}
    secrets:
      TF_GOOGLE_CREDENTIALS: ${{ secrets.TF_GOOGLE_CREDENTIALS }}

  apply-vpc-networks:
    name: üåê Apply VPC Networks
    needs: [get-env, detect-resource-changes, apply-folders, apply-projects]
    if: |
      always() &&
      needs.detect-resource-changes.outputs.has-vpc-network-changes == 'true' &&
      (needs.apply-folders.result == 'success' || needs.apply-folders.result == 'skipped' || needs.apply-folders.result == null) &&
      (needs.apply-projects.result == 'success' || needs.apply-projects.result == 'skipped' || needs.apply-projects.result == null)
    uses: ./.github/workflows/terragrunt-reusable.yaml
    with:
      mode: "apply"
      resource_type: "vpc-network"
      resource_paths: '["live/dev-account/**/*-vpc-network/", "live/dev-account/**/vpc-network/"]'
      template_path: "_common/templates/network"
      resource_emoji: "üåê"
      excluded_resources: ${{ needs.detect-resource-changes.outputs.deleted-resources }}
    secrets:
      TF_GOOGLE_CREDENTIALS: ${{ secrets.TF_GOOGLE_CREDENTIALS }}

  apply-external-ips:
    name: üåç Apply External IPs
    needs: [get-env, detect-resource-changes, apply-folders, apply-projects, apply-vpc-networks]
    if: |
      always() &&
      needs.detect-resource-changes.outputs.has-external-ip-changes == 'true' &&
      (needs.apply-folders.result == 'success' || needs.apply-folders.result == 'skipped' || needs.apply-folders.result == null) &&
      (needs.apply-projects.result == 'success' || needs.apply-projects.result == 'skipped' || needs.apply-projects.result == null) &&
      (needs.apply-vpc-networks.result == 'success' || needs.apply-vpc-networks.result == 'skipped' || needs.apply-vpc-networks.result == null)
    uses: ./.github/workflows/terragrunt-reusable.yaml
    with:
      mode: "apply"
      resource_type: "external-ip"
      resource_paths: '["live/dev-account/**/external-ips/*/"]'
      template_path: "_common/templates/external_ip"
      resource_emoji: "üåç"
      excluded_resources: ${{ needs.detect-resource-changes.outputs.deleted-resources }}
    secrets:
      TF_GOOGLE_CREDENTIALS: ${{ secrets.TF_GOOGLE_CREDENTIALS }}

  apply-firewall-rules:
    name: üõ° Apply Firewall Rules
    needs: [get-env, detect-resource-changes, apply-folders, apply-projects, apply-vpc-networks]
    if: |
      always() &&
      needs.detect-resource-changes.outputs.has-firewall-rules-changes == 'true' &&
      (needs.apply-folders.result == 'success' || needs.apply-folders.result == 'skipped' || needs.apply-folders.result == null) &&
      (needs.apply-projects.result == 'success' || needs.apply-projects.result == 'skipped' || needs.apply-projects.result == null) &&
      (needs.apply-vpc-networks.result == 'success' || needs.apply-vpc-networks.result == 'skipped' || needs.apply-vpc-networks.result == null)
    uses: ./.github/workflows/terragrunt-reusable.yaml
    with:
      mode: "apply"
      resource_type: "firewall-rules"
      resource_paths: '["live/dev-account/**/firewall-rules/*/", "live/dev-account/**/firewall-rules/"]'
      template_path: "_common/templates/firewall_rules"
      resource_emoji: "üõ°"
      excluded_resources: ${{ needs.detect-resource-changes.outputs.deleted-resources }}
    secrets:
      TF_GOOGLE_CREDENTIALS: ${{ secrets.TF_GOOGLE_CREDENTIALS }}

  apply-buckets:
    name: ü™£ Apply Storage Buckets
    needs: [get-env, detect-resource-changes, apply-folders, apply-projects, apply-vpc-networks]
    if: |
      always() &&
      needs.detect-resource-changes.outputs.has-buckets-changes == 'true' &&
      (needs.apply-folders.result == 'success' || needs.apply-folders.result == 'skipped' || needs.apply-folders.result == null) &&
      (needs.apply-projects.result == 'success' || needs.apply-projects.result == 'skipped' || needs.apply-projects.result == null) &&
      (needs.apply-vpc-networks.result == 'success' || needs.apply-vpc-networks.result == 'skipped' || needs.apply-vpc-networks.result == null)
    uses: ./.github/workflows/terragrunt-reusable.yaml
    with:
      mode: "apply"
      resource_type: "buckets"
      resource_paths: '["live/dev-account/**/buckets/*/"]'
      template_path: "_common/templates/cloud_storage"
      resource_emoji: "ü™£"
      excluded_resources: ${{ needs.detect-resource-changes.outputs.deleted-resources }}
    secrets:
      TF_GOOGLE_CREDENTIALS: ${{ secrets.TF_GOOGLE_CREDENTIALS }}

  apply-secrets:
    name: üîë Apply Secrets
    needs: [get-env, detect-resource-changes, apply-folders, apply-projects]
    if: |
      always() &&
      needs.detect-resource-changes.outputs.has-secrets-changes == 'true' &&
      (needs.apply-folders.result == 'success' || needs.apply-folders.result == 'skipped' || needs.apply-folders.result == null) &&
      (needs.apply-projects.result == 'success' || needs.apply-projects.result == 'skipped' || needs.apply-projects.result == null)
    uses: ./.github/workflows/terragrunt-reusable.yaml
    with:
      mode: "apply"
      resource_type: "secrets"
      resource_paths: '["live/dev-account/**/secrets/*/"]'
      template_path: "_common/templates/secret_manager"
      resource_emoji: "üîê"
      excluded_resources: ${{ needs.detect-resource-changes.outputs.deleted-resources }}
    secrets:
      TF_GOOGLE_CREDENTIALS: ${{ secrets.TF_GOOGLE_CREDENTIALS }}

  apply-bigquery:
    name: üìä Apply BigQuery
    needs: [get-env, detect-resource-changes, apply-folders, apply-projects]
    if: |
      always() &&
      needs.detect-resource-changes.outputs.has-bigquery-changes == 'true' &&
      (needs.apply-folders.result == 'success' || needs.apply-folders.result == 'skipped' || needs.apply-folders.result == null) &&
      (needs.apply-projects.result == 'success' || needs.apply-projects.result == 'skipped' || needs.apply-projects.result == null)
    uses: ./.github/workflows/terragrunt-reusable.yaml
    with:
      mode: "apply"
      resource_type: "bigquery"
      resource_paths: '["live/dev-account/**/bigquery/*/"]'
      template_path: "_common/templates/bigquery"
      resource_emoji: "üìä"
      excluded_resources: ${{ needs.detect-resource-changes.outputs.deleted-resources }}
    secrets:
      TF_GOOGLE_CREDENTIALS: ${{ secrets.TF_GOOGLE_CREDENTIALS }}

  apply-cloud-sql:
    name: üóÑÔ∏è Apply Cloud SQL
    needs: [get-env, detect-resource-changes, apply-folders, apply-projects, apply-vpc-networks, apply-private-service-access]
    if: |
      always() &&
      needs.detect-resource-changes.outputs.has-cloud-sql-changes == 'true' &&
      (needs.apply-folders.result == 'success' || needs.apply-folders.result == 'skipped' || needs.apply-folders.result == null) &&
      (needs.apply-projects.result == 'success' || needs.apply-projects.result == 'skipped' || needs.apply-projects.result == null) &&
      (needs.apply-vpc-networks.result == 'success' || needs.apply-vpc-networks.result == 'skipped' || needs.apply-vpc-networks.result == null) &&
      (needs.apply-private-service-access.result == 'success' || needs.apply-private-service-access.result == 'skipped' || needs.apply-private-service-access.result == null)
    uses: ./.github/workflows/terragrunt-reusable.yaml
    with:
      mode: "apply"
      resource_type: "cloud-sql"
      resource_paths: '["live/dev-account/**/cloud-sql/*/"]'
      template_path: "_common/templates/cloud_sql"
      resource_emoji: "üóÑÔ∏è"
      excluded_resources: ${{ needs.detect-resource-changes.outputs.deleted-resources }}
    secrets:
      TF_GOOGLE_CREDENTIALS: ${{ secrets.TF_GOOGLE_CREDENTIALS }}

  apply-gke:
    name: üöÄ Apply GKE Clusters
    needs: [get-env, detect-resource-changes, apply-folders, apply-projects, apply-vpc-networks, apply-firewall-rules]
    if: |
      always() &&
      needs.detect-resource-changes.outputs.has-gke-changes == 'true' &&
      (needs.apply-folders.result == 'success' || needs.apply-folders.result == 'skipped' || needs.apply-folders.result == null) &&
      (needs.apply-projects.result == 'success' || needs.apply-projects.result == 'skipped' || needs.apply-projects.result == null) &&
      (needs.apply-vpc-networks.result == 'success' || needs.apply-vpc-networks.result == 'skipped' || needs.apply-vpc-networks.result == null) &&
      (needs.apply-firewall-rules.result == 'success' || needs.apply-firewall-rules.result == 'skipped' || needs.apply-firewall-rules.result == null)
    uses: ./.github/workflows/terragrunt-reusable.yaml
    with:
      mode: "apply"
      resource_type: "gke"
      resource_paths: '["live/dev-account/**/gke/*/"]'
      template_path: "_common/templates/gke"
      resource_emoji: "üöÄ"
      excluded_resources: ${{ needs.detect-resource-changes.outputs.deleted-resources }}
    secrets:
      TF_GOOGLE_CREDENTIALS: ${{ secrets.TF_GOOGLE_CREDENTIALS }}

  apply-gke-iam-bindings:
    name: üîí Apply GKE IAM Bindings
    needs: [get-env, detect-resource-changes, apply-gke]
    if: |
      always() &&
      needs.detect-resource-changes.outputs.has-gke-iam-bindings-changes == 'true' &&
      (needs.apply-gke.result == 'success' || needs.apply-gke.result == 'skipped' || needs.apply-gke.result == null)
    uses: ./.github/workflows/terragrunt-reusable.yaml
    with:
      mode: "apply"
      resource_type: "gke-iam-bindings"
      resource_paths: '["live/dev-account/**/gke/*/iam-bindings/"]'
      template_path: "_common/templates/iam_bindings"
      resource_emoji: "üîí"
      excluded_resources: ${{ needs.detect-resource-changes.outputs.deleted-resources }}
    secrets:
      TF_GOOGLE_CREDENTIALS: ${{ secrets.TF_GOOGLE_CREDENTIALS }}

  apply-instance-templates:
    name: üìë Apply Instance Templates
    needs: [get-env, detect-resource-changes, apply-folders, apply-projects, apply-vpc-networks]
    if: |
      always() &&
      needs.detect-resource-changes.outputs.has-instance-template-changes == 'true' &&
      (needs.apply-folders.result == 'success' || needs.apply-folders.result == 'skipped' || needs.apply-folders.result == null) &&
      (needs.apply-projects.result == 'success' || needs.apply-projects.result == 'skipped' || needs.apply-projects.result == null) &&
      (needs.apply-vpc-networks.result == 'success' || needs.apply-vpc-networks.result == 'skipped' || needs.apply-vpc-networks.result == null)
    uses: ./.github/workflows/terragrunt-reusable.yaml
    with:
      mode: "apply"
      resource_type: "instance-template"
      resource_paths: '["live/dev-account/**/compute/*/"]'
      template_path: "_common/templates/instance_template"
      resource_emoji: "üìë"
      excluded_resources: ${{ needs.detect-resource-changes.outputs.deleted-resources }}
    secrets:
      TF_GOOGLE_CREDENTIALS: ${{ secrets.TF_GOOGLE_CREDENTIALS }}

  apply-instance-iam-bindings:
    name: üîë Apply Instance IAM Bindings
    needs: [get-env, detect-resource-changes, apply-instance-templates]
    if: |
      always() &&
      needs.detect-resource-changes.outputs.has-instance-iam-bindings-changes == 'true' &&
      (needs.apply-instance-templates.result == 'success' || needs.apply-instance-templates.result == 'skipped' || needs.apply-instance-templates.result == null)
    uses: ./.github/workflows/terragrunt-reusable.yaml
    with:
      mode: "apply"
      resource_type: "instance-iam-bindings"
      resource_paths: '["live/dev-account/**/compute/*/iam-bindings/"]'
      template_path: "_common/templates/iam_bindings"
      resource_emoji: "üîë"
      excluded_resources: ${{ needs.detect-resource-changes.outputs.deleted-resources }}
    secrets:
      TF_GOOGLE_CREDENTIALS: ${{ secrets.TF_GOOGLE_CREDENTIALS }}

  apply-compute:
    name: üíª Apply Compute
    needs: [get-env, detect-resource-changes, apply-folders, apply-projects, apply-vpc-networks, apply-secrets, apply-instance-templates]
    if: |
      always() &&
      needs.detect-resource-changes.outputs.has-compute-changes == 'true' &&
      (needs.apply-folders.result == 'success' || needs.apply-folders.result == 'skipped' || needs.apply-folders.result == null) &&
      (needs.apply-projects.result == 'success' || needs.apply-projects.result == 'skipped' || needs.apply-projects.result == null) &&
      (needs.apply-vpc-networks.result == 'success' || needs.apply-vpc-networks.result == 'skipped' || needs.apply-vpc-networks.result == null) &&
      (needs.apply-secrets.result == 'success' || needs.apply-secrets.result == 'skipped' || needs.apply-secrets.result == null) &&
      (needs.apply-instance-templates.result == 'success' || needs.apply-instance-templates.result == 'skipped' || needs.apply-instance-templates.result == null)
    uses: ./.github/workflows/terragrunt-reusable.yaml
    with:
      mode: "apply"
      resource_type: "compute"
      resource_paths: '["live/dev-account/**/compute/*/vm/"]'
      template_path: "_common/templates/compute_instance"
      resource_emoji: "üíª"
      excluded_resources: ${{ needs.detect-resource-changes.outputs.deleted-resources }}
    secrets:
      TF_GOOGLE_CREDENTIALS: ${{ secrets.TF_GOOGLE_CREDENTIALS }}

  apply-private-service-access:
    name: üîê Apply Private Service Access
    needs: [get-env, detect-resource-changes, apply-folders, apply-projects, apply-vpc-networks]
    if: |
      needs.detect-resource-changes.outputs.has-private-service-access-changes == 'true' &&
      needs.apply-folders.result != 'failure' &&
      (needs.apply-projects.result == 'success' || needs.apply-projects.result == 'skipped') &&
      (needs.apply-vpc-networks.result == 'success' || needs.apply-vpc-networks.result == 'skipped')
    uses: ./.github/workflows/terragrunt-reusable.yaml
    with:
      mode: "apply"
      resource_type: "private-service-access"
      resource_paths: '["live/dev-account/**/*-psa/"]'
      template_path: "_common/templates/private_service_access"
      resource_emoji: "üîó"
      excluded_resources: ${{ needs.detect-resource-changes.outputs.deleted-resources }}
    secrets:
      TF_GOOGLE_CREDENTIALS: ${{ secrets.TF_GOOGLE_CREDENTIALS }}

  deployment-summary:
    name: ‚öíÔ∏è Deployment Summary
    runs-on: ubuntu-latest
    needs: [get-env, detect-resource-changes, apply-folders, apply-projects, apply-iam-bindings, apply-vpc-networks, apply-external-ips, apply-firewall-rules, apply-buckets, apply-instance-templates, apply-instance-iam-bindings, apply-compute, apply-private-service-access, apply-secrets, apply-bigquery, apply-cloud-sql, apply-gke, apply-gke-iam-bindings]
    if: always()
    outputs:
      overall-status: ${{ steps.check-results.outputs.overall-status }}

    steps:
      - name: Check Deployment Results
        id: check-results
        run: |
          echo "=== Deployment Results ==="
          echo "detect-resource-changes: ${{ needs.detect-resource-changes.result }}"

          # Define resource types and their job results in a centralized way
          declare -A RESOURCE_JOBS=(
            ["folder"]="${{ needs.apply-folders.result }}"
            ["project"]="${{ needs.apply-projects.result }}"
            ["vpc-network"]="${{ needs.apply-vpc-networks.result }}"
            ["external-ip"]="${{ needs.apply-external-ips.result }}"
            ["firewall-rules"]="${{ needs.apply-firewall-rules.result }}"
            ["buckets"]="${{ needs.apply-buckets.result }}"
            ["instance-template"]="${{ needs.apply-instance-templates.result }}"
            ["project-iam-bindings"]="${{ needs.apply-iam-bindings.result }}"
            ["instance-iam-bindings"]="${{ needs.apply-instance-iam-bindings.result }}"
            ["compute"]="${{ needs.apply-compute.result }}"
            ["private-service-access"]="${{ needs.apply-private-service-access.result }}"
            ["secrets"]="${{ needs.apply-secrets.result }}"
            ["bigquery"]="${{ needs.apply-bigquery.result }}"
            ["cloud-sql"]="${{ needs.apply-cloud-sql.result }}"
            ["gke"]="${{ needs.apply-gke.result }}"
            ["gke-iam-bindings"]="${{ needs.apply-gke-iam-bindings.result }}"
          )

          declare -A RESOURCE_DISPLAY=(
            ["folder"]="Folder"
            ["project"]="Project"
            ["vpc-network"]="VPC Network"
            ["external-ip"]="External IP"
            ["firewall-rules"]="Firewall Rules"
            ["buckets"]="Storage Buckets"
            ["instance-template"]="Instance Template"
            ["project-iam-bindings"]="Project IAM Bindings"
            ["instance-iam-bindings"]="Instance IAM Bindings"
            ["compute"]="Compute Instance"
            ["private-service-access"]="Private Service Access"
            ["secrets"]="Secrets"
            ["bigquery"]="BigQuery"
            ["cloud-sql"]="Cloud SQL"
            ["gke"]="GKE Clusters"
            ["gke-iam-bindings"]="GKE IAM Bindings"
          )

          # Parse execution order
          EXECUTION_ORDER='${{ needs.detect-resource-changes.outputs.execution-order }}'
          echo "Planned execution order: $EXECUTION_ORDER"

          # Aggregate ALL job results - fail ONLY if ANY job failed (not for skipped)
          OVERALL_STATUS="success"
          FAILED_JOBS=()
          SKIPPED_JOBS=()
          SUCCESS_JOBS=()

          # Check ALL resource jobs, not just those in execution order
          for resource_type in folder project vpc-network external-ip firewall-rules buckets instance-template compute private-service-access secrets bigquery cloud-sql gke project-iam-bindings instance-iam-bindings gke-iam-bindings; do
            result="${RESOURCE_JOBS[$resource_type]}"
            display="${RESOURCE_DISPLAY[$resource_type]}"

            echo "Checking $display: $result"

            if [ "$result" == "failure" ]; then
              echo "‚ùå $display deployment failed"
              FAILED_JOBS+=("$resource_type")
              OVERALL_STATUS="failure"
            elif [ "$result" == "skipped" ]; then
              echo "‚è∏Ô∏è $display deployment skipped"
              SKIPPED_JOBS+=("$resource_type")
              # Skipped jobs don't cause overall failure - they're expected when no changes
            elif [ "$result" == "success" ]; then
              echo "‚úÖ $display deployment passed"
              SUCCESS_JOBS+=("$resource_type")
            elif [ "$result" == "" ] || [ "$result" == "null" ]; then
              echo "‚è∏Ô∏è $display deployment not run"
              # Don't count as failure if the job wasn't supposed to run (no changes detected)
              if echo "$EXECUTION_ORDER" | jq -e ". | contains([\"$resource_type\"])" > /dev/null; then
                SKIPPED_JOBS+=("$resource_type")
                # Only fail if a job that should have run was skipped unexpectedly
                echo "‚ö†Ô∏è $display was expected to run but was skipped - this may indicate a workflow issue"
                OVERALL_STATUS="failure"
              fi
            else
              echo "‚ö†Ô∏è $display deployment unknown status: $result"
              SKIPPED_JOBS+=("$resource_type")
              OVERALL_STATUS="failure"
            fi
          done

          # Output results
          echo "overall-status=$OVERALL_STATUS" >> $GITHUB_OUTPUT

          # Convert arrays to comma-separated strings for output
          FAILED_LIST=$(IFS=,; echo "${FAILED_JOBS[*]}")
          SKIPPED_LIST=$(IFS=,; echo "${SKIPPED_JOBS[*]}")
          SUCCESS_LIST=$(IFS=,; echo "${SUCCESS_JOBS[*]}")

          echo "failed-jobs=$FAILED_LIST" >> $GITHUB_OUTPUT
          echo "skipped-jobs=$SKIPPED_LIST" >> $GITHUB_OUTPUT
          echo "success-jobs=$SUCCESS_LIST" >> $GITHUB_OUTPUT

          echo "Overall deployment status: $OVERALL_STATUS"
          echo "Failed jobs: $FAILED_LIST"
          echo "Skipped jobs: $SKIPPED_LIST"
          echo "Successful jobs: $SUCCESS_LIST"

      - name: Generate Deployment Summary
        run: |
          # Determine overall status and styling
          OVERALL_STATUS="${{ steps.check-results.outputs.overall-status }}"
          FAILED_JOBS="${{ steps.check-results.outputs.failed-jobs }}"
          SKIPPED_JOBS="${{ steps.check-results.outputs.skipped-jobs }}"
          SUCCESS_JOBS="${{ steps.check-results.outputs.success-jobs }}"
          EXECUTION_ORDER='${{ needs.detect-resource-changes.outputs.execution-order }}'

          if [ "$OVERALL_STATUS" == "success" ]; then
            STATUS_ICON="‚úÖ"
            STATUS_COLOR="üü¢"
            STATUS_TEXT="SUCCESS"
          else
            STATUS_ICON="‚ùå"
            STATUS_COLOR="üî¥"
            STATUS_TEXT="FAILED"
          fi

          echo "## üöÄ Terragrunt Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "${STATUS_COLOR} **OVERALL STATUS: ${STATUS_TEXT}** ${STATUS_ICON}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Workflow:** [View Details](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Show execution order and results
          echo "### üîÑ Execution Order & Results" >> $GITHUB_STEP_SUMMARY
          echo "**Dependency Tree:**" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "üìÅ folder" >> $GITHUB_STEP_SUMMARY
          echo "‚îî‚îÄ‚îÄ üì¶ project" >> $GITHUB_STEP_SUMMARY
          echo "    ‚îú‚îÄ‚îÄ üåê vpc-network" >> $GITHUB_STEP_SUMMARY
          echo "    ‚îÇ   ‚îú‚îÄ‚îÄ üåç external-ip" >> $GITHUB_STEP_SUMMARY
          echo "    ‚îÇ   ‚îú‚îÄ‚îÄ üî• firewall-rules" >> $GITHUB_STEP_SUMMARY
          echo "    ‚îÇ   ‚îú‚îÄ‚îÄ üîó private-service-access" >> $GITHUB_STEP_SUMMARY
          echo "    ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ üóÑÔ∏è cloud-sql" >> $GITHUB_STEP_SUMMARY
          echo "    ‚îÇ   ‚îú‚îÄ‚îÄ üöÄ gke" >> $GITHUB_STEP_SUMMARY
          echo "    ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ üîí gke-iam-bindings" >> $GITHUB_STEP_SUMMARY
          echo "    ‚îÇ   ‚îî‚îÄ‚îÄ üìë instance-template" >> $GITHUB_STEP_SUMMARY
          echo "    ‚îÇ       ‚îî‚îÄ‚îÄ üíª compute" >> $GITHUB_STEP_SUMMARY
          echo "    ‚îú‚îÄ‚îÄ ü™£ buckets" >> $GITHUB_STEP_SUMMARY
          echo "    ‚îú‚îÄ‚îÄ üîê secrets" >> $GITHUB_STEP_SUMMARY
          echo "    ‚îî‚îÄ‚îÄ üìä bigquery" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Parse execution order and show status for each
          if echo "$EXECUTION_ORDER" | jq -e '. | length > 0' > /dev/null; then
            echo "| Step | Resource Type | Status | Result |" >> $GITHUB_STEP_SUMMARY
            echo "|------|---------------|--------|--------|" >> $GITHUB_STEP_SUMMARY

            # Define resource metadata
            declare -A RESOURCE_META=(
              ["folder"]="üìÅ Folder"
              ["project"]="üì¶ Project"
              ["vpc-network"]="üåê VPC Network"
              ["external-ip"]="üåç External IP"
              ["firewall-rules"]="üî• Firewall Rules"
              ["buckets"]="ü™£ Storage Buckets"
              ["instance-template"]="üìã Instance Template"
              ["compute"]="üíª Compute Instance"
              ["private-service-access"]="üîó Private Service Access"
              ["secrets"]="üîê Secret"
              ["bigquery"]="üìä BigQuery"
              ["cloud-sql"]="üóÑÔ∏è Cloud SQL"
            )

            declare -A RESOURCE_RESULTS=(
              ["folder"]="${{ needs.apply-folders.result }}"
              ["project"]="${{ needs.apply-projects.result }}"
              ["vpc-network"]="${{ needs.apply-vpc-networks.result }}"
              ["external-ip"]="${{ needs.apply-external-ips.result }}"
              ["firewall-rules"]="${{ needs.apply-firewall-rules.result }}"
              ["buckets"]="${{ needs.apply-buckets.result }}"
              ["instance-template"]="${{ needs.apply-instance-templates.result }}"
              ["compute"]="${{ needs.apply-compute.result }}"
              ["private-service-access"]="${{ needs.apply-private-service-access.result }}"
              ["secrets"]="${{ needs.apply-secrets.result }}"
              ["bigquery"]="${{ needs.apply-bigquery.result }}"
              ["cloud-sql"]="${{ needs.apply-cloud-sql.result }}"
            )

            STEP_NUM=1
            # Process in dependency order: folder, project, then parallel (vpc-network + secrets), then private-service-access
            # Process sequential resources first
            for resource in folder project; do
              if echo "$EXECUTION_ORDER" | jq -e ". | contains([\"$resource\"])" > /dev/null; then
                RESULT="${RESOURCE_RESULTS[$resource]}"
                DISPLAY="${RESOURCE_META[$resource]}"

                if [ "$RESULT" == "success" ]; then
                  STATUS_EMOJI="‚úÖ"
                  STATUS_TEXT="DEPLOYED"
                elif [ "$RESULT" == "failure" ]; then
                  STATUS_EMOJI="‚ùå"
                  STATUS_TEXT="FAILED"
                elif [ "$RESULT" == "skipped" ]; then
                  STATUS_EMOJI="‚è∏Ô∏è"
                  STATUS_TEXT="SKIPPED"
                else
                  STATUS_EMOJI="‚è∏Ô∏è"
                  STATUS_TEXT="NOT RUN"
                fi

                echo "| $STEP_NUM | $DISPLAY | $STATUS_EMOJI $STATUS_TEXT | $RESULT |" >> $GITHUB_STEP_SUMMARY
                STEP_NUM=$((STEP_NUM + 1))

                # If this step failed, break to show that remaining steps were not executed
                if [ "$RESULT" == "failure" ]; then
                  break
                fi
              fi
            done

            # Process parallel resources (step 3-1, 3-2, 3-3, 3-4, 3-5, 3-6, and 3-7)
            for resource in vpc-network external-ip firewall-rules buckets secrets bigquery project-iam-bindings; do
              if echo "$EXECUTION_ORDER" | jq -e ". | contains([\"$resource\"])" > /dev/null; then
                RESULT="${RESOURCE_RESULTS[$resource]}"
                DISPLAY="${RESOURCE_META[$resource]}"

                if [ "$RESULT" == "success" ]; then
                  STATUS_EMOJI="‚úÖ"
                  STATUS_TEXT="DEPLOYED"
                elif [ "$RESULT" == "failure" ]; then
                  STATUS_EMOJI="‚ùå"
                  STATUS_TEXT="FAILED"
                elif [ "$RESULT" == "skipped" ]; then
                  STATUS_EMOJI="‚è∏Ô∏è"
                  STATUS_TEXT="SKIPPED"
                else
                  STATUS_EMOJI="‚è∏Ô∏è"
                  STATUS_TEXT="NOT RUN"
                fi

                if [ "$resource" == "vpc-network" ]; then
                  echo "| 3-1 | $DISPLAY | $STATUS_EMOJI $STATUS_TEXT | $RESULT |" >> $GITHUB_STEP_SUMMARY
                elif [ "$resource" == "external-ip" ]; then
                  echo "| 3-2 | $DISPLAY | $STATUS_EMOJI $STATUS_TEXT | $RESULT |" >> $GITHUB_STEP_SUMMARY
                elif [ "$resource" == "firewall-rules" ]; then
                  echo "| 3-3 | $DISPLAY | $STATUS_EMOJI $STATUS_TEXT | $RESULT |" >> $GITHUB_STEP_SUMMARY
                elif [ "$resource" == "buckets" ]; then
                  echo "| 3-4 | $DISPLAY | $STATUS_EMOJI $STATUS_TEXT | $RESULT |" >> $GITHUB_STEP_SUMMARY
                elif [ "$resource" == "secrets" ]; then
                  echo "| 3-5 | $DISPLAY | $STATUS_EMOJI $STATUS_TEXT | $RESULT |" >> $GITHUB_STEP_SUMMARY
                elif [ "$resource" == "bigquery" ]; then
                  echo "| 3-6 | $DISPLAY | $STATUS_EMOJI $STATUS_TEXT | $RESULT |" >> $GITHUB_STEP_SUMMARY
                elif [ "$resource" == "project-iam-bindings" ]; then
                  echo "| 3-7 | $DISPLAY | $STATUS_EMOJI $STATUS_TEXT | $RESULT |" >> $GITHUB_STEP_SUMMARY
                fi
              fi
            done

            # Process private-service-access, instance template, and instance IAM bindings resources (step 4-1, 4-2, and 4-3)
            for resource in private-service-access instance-template instance-iam-bindings; do
              if echo "$EXECUTION_ORDER" | jq -e ". | contains([\"$resource\"])" > /dev/null; then
                RESULT="${RESOURCE_RESULTS[$resource]}"
                DISPLAY="${RESOURCE_META[$resource]}"

                if [ "$RESULT" == "success" ]; then
                  STATUS_EMOJI="‚úÖ"
                  STATUS_TEXT="DEPLOYED"
                elif [ "$RESULT" == "failure" ]; then
                  STATUS_EMOJI="‚ùå"
                  STATUS_TEXT="FAILED"
                elif [ "$RESULT" == "skipped" ]; then
                  STATUS_EMOJI="‚è∏Ô∏è"
                  STATUS_TEXT="SKIPPED"
                else
                  STATUS_EMOJI="‚è∏Ô∏è"
                  STATUS_TEXT="NOT RUN"
                fi

                if [ "$resource" == "private-service-access" ]; then
                  echo "| 4-1 | $DISPLAY | $STATUS_EMOJI $STATUS_TEXT | $RESULT |" >> $GITHUB_STEP_SUMMARY
                elif [ "$resource" == "instance-template" ]; then
                  echo "| 4-2 | $DISPLAY | $STATUS_EMOJI $STATUS_TEXT | $RESULT |" >> $GITHUB_STEP_SUMMARY
                elif [ "$resource" == "instance-iam-bindings" ]; then
                  echo "| 4-3 | $DISPLAY | $STATUS_EMOJI $STATUS_TEXT | $RESULT |" >> $GITHUB_STEP_SUMMARY
                fi
              fi
            done

            # Process cloud-sql resources (step 5)
            for resource in cloud-sql; do
              if echo "$EXECUTION_ORDER" | jq -e ". | contains([\"$resource\"])" > /dev/null; then
                RESULT="${RESOURCE_RESULTS[$resource]}"
                DISPLAY="${RESOURCE_META[$resource]}"

                if [ "$RESULT" == "success" ]; then
                  STATUS_EMOJI="‚úÖ"
                  STATUS_TEXT="DEPLOYED"
                elif [ "$RESULT" == "failure" ]; then
                  STATUS_EMOJI="‚ùå"
                  STATUS_TEXT="FAILED"
                elif [ "$RESULT" == "skipped" ]; then
                  STATUS_EMOJI="‚è∏Ô∏è"
                  STATUS_TEXT="SKIPPED"
                else
                  STATUS_EMOJI="‚è∏Ô∏è"
                  STATUS_TEXT="NOT RUN"
                fi

                echo "| 5 | $DISPLAY | $STATUS_EMOJI $STATUS_TEXT | $RESULT |" >> $GITHUB_STEP_SUMMARY
              fi
            done

            # Process compute resources (step 6)
            for resource in compute; do
              if echo "$EXECUTION_ORDER" | jq -e ". | contains([\"$resource\"])" > /dev/null; then
                RESULT="${RESOURCE_RESULTS[$resource]}"
                DISPLAY="${RESOURCE_META[$resource]}"

                if [ "$RESULT" == "success" ]; then
                  STATUS_EMOJI="‚úÖ"
                  STATUS_TEXT="DEPLOYED"
                elif [ "$RESULT" == "failure" ]; then
                  STATUS_EMOJI="‚ùå"
                  STATUS_TEXT="FAILED"
                elif [ "$RESULT" == "skipped" ]; then
                  STATUS_EMOJI="‚è∏Ô∏è"
                  STATUS_TEXT="SKIPPED"
                else
                  STATUS_EMOJI="‚è∏Ô∏è"
                  STATUS_TEXT="NOT RUN"
                fi

                echo "| 6 | $DISPLAY | $STATUS_EMOJI $STATUS_TEXT | $RESULT |" >> $GITHUB_STEP_SUMMARY
              fi
            done
          else
            echo "No resource changes detected in this deployment." >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY

          # Show detailed results
          echo "### üìä Detailed Results" >> $GITHUB_STEP_SUMMARY

          if [ "$OVERALL_STATUS" == "success" ]; then
            echo "- **‚úÖ All deployments successful** - Infrastructure changes applied successfully" >> $GITHUB_STEP_SUMMARY
            echo "- **üîÑ Execution order respected** - Dependencies deployed in correct sequence" >> $GITHUB_STEP_SUMMARY
            echo "- **üìã Individual deployment logs** available for each resource type with detailed output" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **‚ùå Deployment failed** - One or more deployment jobs failed or were skipped" >> $GITHUB_STEP_SUMMARY
            if [ -n "$FAILED_JOBS" ]; then
              echo "- **üö´ Failed jobs:** $FAILED_JOBS" >> $GITHUB_STEP_SUMMARY
            fi
            if [ -n "$SKIPPED_JOBS" ]; then
              echo "- **‚è∏Ô∏è Skipped jobs:** $SKIPPED_JOBS" >> $GITHUB_STEP_SUMMARY
            fi
            echo "- **üîß Review failed deployments** and check for configuration issues" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Comment Commit with Deployment Results
        uses: actions/github-script@v7
        with:
          script: |
            const overallStatus = '${{ steps.check-results.outputs.overall-status }}';
            const failedJobs = '${{ steps.check-results.outputs.failed-jobs }}';
            const skippedJobs = '${{ steps.check-results.outputs.skipped-jobs }}';
            const successJobs = '${{ steps.check-results.outputs.success-jobs }}';
            const executionOrder = '${{ needs.detect-resource-changes.outputs.execution-order }}';
            const sha = '${{ github.sha }}';

            // Determine status styling
            let statusIcon = '';
            let statusColor = '';
            let overallStatusText = '';

            if (overallStatus === 'success') {
              statusIcon = '‚úÖ';
              statusColor = 'üü¢';
              overallStatusText = 'ALL DEPLOYMENTS SUCCESSFUL';
            } else {
              statusIcon = '‚ùå';
              statusColor = 'üî¥';
              overallStatusText = 'DEPLOYMENT FAILED';
            }

            const comment = `## üöÄ Terragrunt Deployment Results

            ${statusColor} **Status: ${overallStatusText}** ${statusIcon}

            **Commit:** \`${sha.substring(0, 7)}\`
            **Workflow:** [View Details](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})

            ### üîÑ Deployment Order & Results
            **Dependency Order:** folder ‚Üí project ‚Üí (vpc-network + external-ip + secrets + bigquery in parallel) ‚Üí private-service-access + instance-template ‚Üí compute

            Infrastructure resources were deployed in the correct dependency order with parallel execution where possible.

            ---
            <details>
            <summary>üîç About Engine Deployment</summary>

            This engine ensures that infrastructure resources are deployed in the correct dependency order:

            1. **üìÅ Folders** - Foundation organizational structure
            2. **üì¶ Projects** - GCP projects that depend on folders
            3. **üåê VPC Networks** + **üîê Secrets** + **ü™£ Buckets** + **üìä BigQuery** - Run in parallel after projects
            4. **üåç External IPs** + **üî• Firewall Rules** + **üîó Private Service Access** + **üìã Instance Templates** - Run in parallel after VPC
            5. **üóÑÔ∏è Cloud SQL** - Database instances that depend on private service access
            6. **üíª Compute Instances** - Virtual machines that depend on instance templates

            **Deployment stops at the first failure** to prevent cascading issues and ensure that foundational resources are deployed before dependent resources.
            </details>
            `;

            // Create commit comment
            github.rest.repos.createCommitComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: sha,
              body: comment
            });

      - name: Fail if Deployment unsuccessful
        if: steps.check-results.outputs.overall-status == 'failure'
        run: |
          echo "‚ùå Engine deployment failed. Please review the errors and fix the issues."
          exit 1

concurrency:
  group: apply-engine-${{ github.ref }}
  cancel-in-progress: true
